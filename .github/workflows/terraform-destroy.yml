name: Terraform Destroy

on: 
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        type: choice
        options:
          - staging
          - production

env:            
  AWS_REGION: ap-southeast-1  

jobs:
  Destroy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init with Dynamic Backend Config
      run: |
        rm -rf .terraform  # ✅ Ensures correct backend is used
        terraform init \
          -reconfigure \
          -backend-config="key=terraform/ce8-coaching-18/${{ github.event.inputs.environment }}/terraform.tfstate"

    - name: Debug Terraform State
      run: |
        echo "Checking Terraform state for environment: ${{ github.event.inputs.environment }}"
        terraform state list  # ✅ Verify which resources exist

    - name: Terraform Refresh
      run: terraform refresh  # ✅ Sync Terraform state with AWS

    - name: Terraform Destroy
      run: |
        terraform destroy -auto-approve \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="ecs_cluster_name=${{ vars.TF_VAR_ECS_CLUSTER_NAME }}" \
          -var="ecs_task_family=${{ vars.TF_VAR_ECS_TASK_FAMILY }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="ecs_service_name=${{ vars.TF_VAR_ECS_SERVICE_NAME }}" \
          -var="container_name=${{ vars.TF_VAR_CONTAINER_NAME }}" \
          -var="ecr_repository=${{ vars.TF_VAR_ECR_REPOSITORY }}"
