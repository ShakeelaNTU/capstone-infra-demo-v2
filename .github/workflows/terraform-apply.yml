name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        type: string  # Input type should be string

env:
  AWS_REGION: ap-southeast-1  # Set region statically if fixed for both environments
  S3_BUCKET: ${{ secrets.S3_BUCKET }}  # Store the S3 bucket name in GitHub Secrets
  OUTPUT_PATH: terraform/ce8-coaching-18/${{ github.event.inputs.environment }}/tf_output  # Path for the output file
  TF_OUTPUT_FILE: tf_outputs.txt  # Define the output file name

jobs:
  Terraform-Deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}  # Region passed statically

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize Terraform with Backend Config
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.S3_BUCKET }}" \
          -backend-config="key=terraform/ce8-coaching-18/${{ github.event.inputs.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    # Select Terraform Workspace (Automatically selects or creates the workspace for the environment)
    - name: Terraform Workspace Select
      run: |
        terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

    - name: Terraform Validate
      run: terraform validate

    # Terraform Plan using the corresponding tfvars file for the selected environment
    - name: Terraform Plan
      run: |
        terraform plan \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars"  # Pass the corresponding .tfvars file

    # Apply the changes using the corresponding tfvars file for the selected environment
    - name: Terraform Apply
      run: |
        terraform apply \
          -var-file="environments/${{ github.event.inputs.environment }}.tfvars"  # Pass the corresponding .tfvars file \
          --auto-approve

    # ✅ Store Terraform Output as a text file
    - name: Generate Terraform Output as Text
      run: |
        terraform output > ${{ env.TF_OUTPUT_FILE }}  # Use the environment variable for the output file
        cat ${{ env.TF_OUTPUT_FILE }}  # Show output for debugging

    # ✅ Debugging Logs
    - name: Debugging Logs
      run: | 
        echo "Uploading Terraform outputs to: s3://${{ env.S3_BUCKET }}/${{ env.OUTPUT_PATH }}"

    # ✅ Upload Terraform Outputs to S3
    - name: Upload Terraform Outputs to S3
      run: |
        aws s3 cp ${{ env.TF_OUTPUT_FILE }} s3://${{ env.S3_BUCKET }}/${{ env.OUTPUT_PATH }} --content-type text/plain
