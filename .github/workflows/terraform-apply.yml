name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        type: choice
        options:
          - staging
          - production  # Added production option

env:
  AWS_REGION: ap-southeast-1

jobs:
  Terraform-Deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init with Dynamic Backend Config
      run: |
        terraform init \
          -backend-config="key=terraform/ce8-coaching-18/${{ github.event.inputs.environment }}/terraform.tfstate"

    - name: Terraform Validate
      run: terraform validate 

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="ecs_cluster_name=${{ vars.TF_VAR_ECS_CLUSTER_NAME }}" \
          -var="ecs_task_family=${{ vars.TF_VAR_ECS_TASK_FAMILY }}" \
          -var="ecs_service_name=${{ vars.TF_VAR_ECS_SERVICE_NAME }}" \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="container_name=${{ vars.TF_VAR_CONTAINER_NAME }}" \
          -var="ecr_repository=${{ vars.TF_VAR_ECR_REPOSITORY }}"

    - name: Terraform Apply
      run: |
        terraform apply \
          -var="ecs_cluster_name=${{ vars.TF_VAR_ECS_CLUSTER_NAME }}" \
          -var="ecs_task_family=${{ vars.TF_VAR_ECS_TASK_FAMILY }}" \
          -var="ecs_service_name=${{ vars.TF_VAR_ECS_SERVICE_NAME }}" \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="dynamodb_table_name=${{ vars.TF_VAR_DYNAMODB_TABLE_NAME }}" \
          -var="container_name=${{ vars.TF_VAR_CONTAINER_NAME }}" \
          -var="ecr_repository=${{ vars.TF_VAR_ECR_REPOSITORY }}" \
          --auto-approve

    # ✅ Store Terraform Output as a text file
    - name: Generate Terraform Output as Text
      run: |
        terraform output > tf_outputs.txt
        cat tf_outputs.txt  # Show output for debugging

    # ✅ Debugging Logs
    - name: Debugging Logs
      run: | 
        echo "Uploading Terraform outputs to: s3://${{ vars.S3_BUCKET }}/terraform/ce8-coaching-18/${{ github.event.inputs.environment }}/tf_output"

    # ✅ Upload Terraform Outputs to S3
    - name: Upload Terraform Outputs to S3
      run: |
        OUTPUT_PATH="terraform/ce8-coaching-18/${{ github.event.inputs.environment }}/tf_output"
        aws s3 cp tf_outputs.txt s3://${{ vars.S3_BUCKET }}/${OUTPUT_PATH} --content-type text/plain
