name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to destroy"
        required: true
        type: choice
        options: [staging, production]

env:
  AWS_REGION: ap-southeast-1

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
    - uses: actions/checkout@v4

    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - uses: hashicorp/setup-terraform@v3

    - name: Set environment variables
      run: |
        echo "TF_VAR_environment=${{ inputs.environment }}" >> $GITHUB_ENV
        echo "TF_VAR_create_ecr=$([ "${{ inputs.environment }}" == "staging" ] && echo "true" || echo "false")" >> $GITHUB_ENV
        echo "TF_CLI_ARGS=-no-color" >> $GITHUB_ENV

    - name: Terraform Init
      run: terraform init -backend-config="bucket=${{ secrets.S3_BUCKET }}" -backend-config="key=terraform/${{ github.repository }}/${{ inputs.environment }}/terraform.tfstate"

    - name: Conditional ECR cleanup
      if: env.TF_VAR_create_ecr == 'true'
      run: |
        aws ecr delete-repository --repository-name ${{ vars.ECR_REPOSITORY }} --force --no-cli-pager || true
        terraform state rm aws_ecr_repository.register_service_repo 2>/dev/null || true

    - name: Destroy infrastructure
      run: |
        terraform state list -id | grep -v "data." | xargs -r terraform state rm || true
        terraform destroy -auto-approve